[comment encoding = UTF-8 /]
[module update('http://www.eclipse.org/uml2/5.0.0/UML')]

[comment: base template /]
[template public update(aClass : Class){
	entity 		: String = aClass.name.toUpperFirst();
	property	: String = aClass.name.toLowerFirst();}]
[comment: Update one by id /]
[for (p: Property | aClass.getAllAttributes()) separator('\n')]
	[if p.isID = true]
@PutMapping("/{[p.name.toLowerFirst()/]}")
public [entity/] updateOneBy[p.name.toUpperFirst()/](@PathVariable [p.type.name.toUpperFirst()/] [p.name.toLowerFirst()/], @RequestBody [entity/] [property/]) {
	[entity/] current = [property/]Service.readOneBy[p.name.toUpperFirst()/]([p.name.toLowerFirst()/]);
	[foreignKeys(aClass)/]
	[fields(aClass)/]			
	return [property/]Service.createUpdate(current);
}
	[/if]
[/for]

[for (p1: Property | aClass.getAllAttributes()) separator('\n')]
	[if p1.isID = true]
		[for (p : Property | aClass.getAssociations().memberEnd)]
			[comment: IRIC for manyToOne /]
			[if p.lower = 1 and p.upper = -1 and p.type.name.toUpperFirst() = entity and 
				p.namespace = association and p.opposite.lower = 1 and p.opposite.upper = 1]
@PutMapping("/{[p1.name.toLowerFirst()/]}/[p.opposite.type.name.toLowerFirst()/]")
public [entity/] updateOneBy[p1.name.toUpperFirst()/]Iric(@PathVariable [p1.type.name.toUpperFirst()/] [p1.name.toLowerFirst()/], @RequestBody [entity/] [property/]) {
	[entity/] current = [property/]Service.readOneBy[p1.name.toUpperFirst()/]([p1.name.toLowerFirst()/]);
	if (current.get[p.opposite.type.name.toUpperFirst()/]().getId() == [property/].get[p.opposite.type.name.toUpperFirst()/]().getId()) {
		[foreignKeys(aClass)/]
		[fields(aClass)/]			
		return [property/]Service.createUpdate(current);
	} else {
	    Iterable<[entity/]> listOf[entity/] = [property/]Service.readAllBy[p.opposite.type.name.toUpperFirst()/]Id(current.get[p.opposite.type.name.toUpperFirst()/]().getId());
	    Long size = listOf[entity/].spliterator().getExactSizeIfKnown();
	    if (size == 1) {
			return current;
	    } else {
			[foreignKeys(aClass)/]
			[fields(aClass)/]			
			return [property/]Service.createUpdate(current);
	    }
	}
}
			[/if]
		[/for]
	[/if]
[/for]

[comment: Update one by field with unique values /]
[for (p: Property | aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)) separator('\n')]
	[if p.isUnique = true and p.isID = false]
@PutMapping("/[p.name.toLowerFirst()/]={[p.name.toLowerFirst()/]}")
public [entity/] updateOneBy[p.name.toUpperFirst()/](@PathVariable [p.type.name.toUpperFirst()/] [p.name.toLowerFirst()/], @RequestBody [entity/] [property/]) {
	[entity/] current = [property/]Service.readOneBy[p.name.toUpperFirst()/]([p.name.toLowerFirst()/]);
	[foreignKeys(aClass)/]
	[fields(aClass)/]			
	return [property/]Service.createUpdate(current);		
}
	[/if]
[/for]

[for (p1: Property | aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)) separator('\n')]
	[if p1.isUnique = true and p1.isID = false]
		[for (p : Property | aClass.getAssociations().memberEnd)]
			[comment: IRIC for manyToOne /]
			[if p.lower = 1 and p.upper = -1 and p.type.name.toUpperFirst() = entity and 
				p.namespace = association and p.opposite.lower = 1 and p.opposite.upper = 1]
@PutMapping("/[p1.name.toLowerFirst()/]={[p1.name.toLowerFirst()/]}/[p.opposite.type.name.toLowerFirst()/]")
public [entity/] updateOneBy[p1.name.toUpperFirst()/]Iric(@PathVariable [p1.type.name.toUpperFirst()/] [p1.name.toLowerFirst()/], @RequestBody [entity/] [property/]) {
	[entity/] current = [property/]Service.readOneBy[p1.name.toUpperFirst()/]([p1.name.toLowerFirst()/]);
	if (current.get[p.opposite.type.name.toUpperFirst()/]().getId() == [property/].get[p.opposite.type.name.toUpperFirst()/]().getId()) {
		[foreignKeys(aClass)/]
		[fields(aClass)/]			
		return [property/]Service.createUpdate(current);
	} else {
	    Iterable<[entity/]> listOf[entity/] = [property/]Service.readAllBy[p.opposite.type.name.toUpperFirst()/]Id(current.get[p.opposite.type.name.toUpperFirst()/]().getId());
	    Long size = listOf[entity/].spliterator().getExactSizeIfKnown();
	    if (size == 1) {
			return current;
	    } else {
			[foreignKeys(aClass)/]
			[fields(aClass)/]			
			return [property/]Service.createUpdate(current);
	    }
	}
}
			[/if]
		[/for]
	[/if]
[/for]
[/template]

[comment:
----------------------------------------------------------------------------------------------------
subtemplates
----------------------------------------------------------------------------------------------------
/]

[template public foreignKeys(aClass : Class){
	entity 		: String = aClass.name.toUpperFirst();
	property	: String = aClass.name.toLowerFirst();}]
[for (p : Property | aClass.getAssociations().memberEnd)]
	[comment : ManyToOne/]
	[if (p.lower = 0 or p.lower = 1) and p.upper = -1 and p.type.name.toUpperFirst() = entity and 
		p.namespace = association and p.opposite.lower = 1 and p.opposite.upper = 1]
current.set[p.opposite.type.name.toUpperFirst()/]([property/].get[p.opposite.type.name.toUpperFirst()/]());
	[/if]
	[comment : OneToOne/]
	[if p.lower = 1 and p.upper = 1 and p.type.name.toUpperFirst() = entity and 
		p.namespace = association and p.opposite.lower = 1 and p.opposite.upper = 1]
current.set[p.opposite.type.name.toUpperFirst()/]([property/].get[p.opposite.type.name.toUpperFirst()/]());
	[/if]
	[comment : ManyToMany/]
	[if p.lower = 0 and p.upper = -1 and p.type.name.toUpperFirst() = entity and 
		p.namespace = association and p.opposite.lower = 0 and p.opposite.upper = -1]
current.set[p.opposite.type.name.toUpperFirst()/]Set([property/].get[p.opposite.type.name.toUpperFirst()/]Set());
	[/if]
	[comment : OneToMany/]
	[if p.lower = 1 and p.upper = 1 and p.type.name.toUpperFirst() = entity and 
		p.namespace = association and p.opposite.lower = 0 and p.opposite.upper = -1]
current.set[p.opposite.type.name.toUpperFirst()/]List([property/].get[p.opposite.type.name.toUpperFirst()/]List());
	[/if]
[/for]
[/template]

[comment:----------------------------------------------------------------------------------------------------/]

[template public fields(aClass : Class){
	property	: String = aClass.name.toLowerFirst();}]
[for (p: Property | aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)) separator('\n')]
	[if p.isID = false]	
current.set[p.name.toUpperFirst()/]([property/].get[p.name.toUpperFirst()/]());
	[/if]
[/for]
[/template]
