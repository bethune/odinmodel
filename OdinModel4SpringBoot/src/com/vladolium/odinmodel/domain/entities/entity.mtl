[comment encoding = UTF-8 /]
[module entity('http://www.eclipse.org/uml2/5.0.0/UML')]
[comment:
----------------------------------------------------------------------------------------------------/]
[import com::vladolium::odinmodel::domain::entities::javaImports /]
[import com::vladolium::odinmodel::domain::entities::fieldImports /]
[import com::vladolium::odinmodel::domain::entities::relationshipImports /]
[comment:
----------------------------------------------------------------------------------------------------/]
[comment: main template /]
[template public entity(aClass : Class){
	packagePath 	: String = aClass._package.name.toLowerCase();
	entity	 		: String = aClass.name.toUpperFirst();}]
[file ('src/main/java/' + packagePath + '/domain/' + entity + '.java', false, 'UTF-8')]
[commonEntity(aClass)/]
[inheritingEntity(aClass)/]
[abstractClass(aClass)/]	
[/file]
[/template]
[comment:
----------------------------------------------------------------------------------------------------/]
[comment: 3 subtemplates follows /]
[comment: 1st /]
[template public commonEntity(aClass : Class){
	packageName		: String = aClass._package.name.replaceAll('/', '.').toLowerCase().concat('.domain');
	entity	 		: String = aClass.name.toUpperFirst();
	isAbstract 		: Boolean = aClass.isAbstract;
	doesNotInherit 	: Boolean = aClass.general->isEmpty();}]
[if isAbstract = false and doesNotInherit]
package [packageName/];

[aClass.javaImports()/]

@Entity
public class [entity/] {

	[aClass.fieldImports()/]
	[aClass.relationshipImports()/]

//Code between start and end will not be removed during generation.
//[protected ('for this entity')]
//[/protected]
}
[/if]
[/template]
[comment:
----------------------------------------------------------------------------------------------------/]
[comment: 2nd /]
[template public inheritingEntity(aClass : Class){
	packageName		: String = aClass._package.name.replaceAll('/', '.').toLowerCase().concat('.domain');
	entity	 		: String = aClass.name.toUpperFirst();
	isAbstract 		: Boolean = aClass.isAbstract;
	abstract	 	: Collection(T) = aClass.general.name.toUpperFirst();
	doesNotInherit 	: Boolean = aClass.general->isEmpty();}]
[if isAbstract = false and doesNotInherit = false]
package [packageName/];

[aClass.javaImports()/]

@Entity
public class [entity/] extends [abstract/] {

	[aClass.fieldImports()/]
	[aClass.relationshipImports()/]
		
//Code between start and end will not be removed during generation.
//[protected ('for this inheriting entity')]
//[/protected]
}
[/if]
[/template]
[comment:
----------------------------------------------------------------------------------------------------/]
[comment: 3rd /]
[template public abstractClass(aClass : Class){
	packageName		: String = aClass._package.name.replaceAll('/', '.').toLowerCase().concat('.domain');
	entity	 		: String = aClass.name.toUpperFirst();
	abstract	 	: Collection(T) = aClass.general.name.toUpperFirst();
	isAbstract 		: Boolean = aClass.isAbstract;
	doesNotInherit 	: Boolean = aClass.general->isEmpty();}]
[if isAbstract]
package [packageName/];

[aClass.javaImports()/]

@MappedSuperclass
public abstract class [entity/] {

	[aClass.fieldImports()/]

//Code between start and end will not be removed during generation.
//[protected ('for this abstract class')]
//[/protected]
}
[/if]
[/template]