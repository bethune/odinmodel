[comment encoding = UTF-8 /]
[module enum('http://www.eclipse.org/uml2/5.0.0/UML')]

[template public enum(aClass : Class)]

[comment : For all enumerations in the model./]
[for (e: Enumeration | aClass.getModel().eContents(Enumeration)) separator('\n')]
	[comment : For all fields of the current entity./]
	[for (p: Property | aClass.getAllAttributes()->removeAll(aClass.getInheritedMembers())) separator('\n')]
		[if p.type.name = e.name] [comment : If the field's type is an enumeration./]
public enum [p.type.name/] {
			[comment : For all values of the current enumeration./]
			[for (el: EnumerationLiteral | e.ownedLiteral)]
	[el.name/], [comment : Define the enumeration values./]
			[/for]
}
			[if p.lower = 1] [comment : Generate the not null constraint./]
@NotNull
			[/if]
			[if p.isUnique = true] [comment : Generate the unique constraint./]
@Column(unique=true)
			[/if]
@Enumerated(javax.persistence.EnumType.STRING) // --obligatory for saving the value as string, not int
private [p.type.name/] [p.name/]; [comment : Define the field's type and name./]

[comment : Get and Set/]
public [p.type.name/] get[p.name.toUpperFirst()/]() {
	return [p.name/];
}

public void set[p.name.toUpperFirst()/]([p.type.name/] [p.name/]) {
	this.[p.name/] = [p.name/];
}
		[/if]
	[/for]
[/for]

[/template]
