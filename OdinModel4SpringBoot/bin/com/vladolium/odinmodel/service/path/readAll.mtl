[comment encoding = UTF-8 /]
[module readAll('http://www.eclipse.org/uml2/5.0.0/UML')]

[template public readAll(aClass : Class){
	entity 		: String = aClass.name.toUpperFirst();}]
[comment: Read all /]
Iterable<[entity/]> readAll();

[comment: Read all with pagination /]
Page<[entity/]> readAllPagination(Pageable page);

[comment: Read all by parent id in many to one relationship /]
[for (p : Property | aClass.getAssociations().memberEnd)]
	[if p.lower = 0 and p.upper = -1 and p.type.name.toUpperFirst() = aClass.name.toUpperFirst() and 
		p.namespace = association and p.opposite.lower = 1 and p.opposite.upper = 1]
		[for (pack : Package | aClass._package)]
			[for (m : Class | pack.member -> filter(Class))]
				[if (m.name.toLower() <> aClass.name.toLower()) and (m.name.toLower() = p.opposite.type.name.toLower())]
					[for (a: Property | m.getAllAttributes()->removeAll(m.getAssociations().memberEnd)) separator('\n')]
						[if a.isID = true]
[comment: Read all by parent id /]
Iterable <[p.type.name.toUpperFirst()/]> readAllBy[p.opposite.type.name.toUpperFirst()/][a.name.toUpperFirst()/]([a.type.name.toUpperFirst()/] [p.opposite.type.name.toLowerFirst()/][a.name.toUpperFirst()/]);

[comment: Read all by parent id with pagination /]
Page<[p.type.name.toUpperFirst()/]> readAllBy[p.opposite.type.name.toUpperFirst()/][a.name.toUpperFirst()/]([a.type.name.toUpperFirst()/] [p.opposite.type.name.toLowerFirst()/][a.name.toUpperFirst()/], Pageable page);
						[/if]
					[/for]
				[/if]
			[/for]
		[/for]
	[/if]
[/for]

[comment: Read all by parent unique field in many to one relationship /]
[for (p : Property | aClass.getAssociations().memberEnd)]
	[if p.lower = 0 and p.upper = -1 and p.type.name.toUpperFirst() = aClass.name.toUpperFirst() and 
		p.namespace = association and p.opposite.lower = 1 and p.opposite.upper = 1]
		[for (pack : Package | aClass._package)]
			[for (m : Class | pack.member -> filter(Class))]
				[if (m.name.toLower() <> aClass.name.toLower()) and (m.name.toLower() = p.opposite.type.name.toLower())]
					[for (a: Property | m.getAllAttributes()->removeAll(m.getAssociations().memberEnd)) separator('\n')]
						[if a.isUnique = true and a.isID = false]
[comment: Read all by parent unique field /]
Iterable <[p.type.name.toUpperFirst()/]> readAllBy[p.opposite.type.name.toUpperFirst()/][a.name.toUpperFirst()/]([a.type.name.toUpperFirst()/] [p.opposite.type.name.toLowerFirst()/][a.name.toUpperFirst()/]);

[comment: Read all by parent unique field with pagination /]
Page<[p.type.name.toUpperFirst()/]> readAllBy[p.opposite.type.name.toUpperFirst()/][a.name.toUpperFirst()/]([a.type.name.toUpperFirst()/] [p.opposite.type.name.toLowerFirst()/][a.name.toUpperFirst()/], Pageable page);
						[/if]
					[/for]
				[/if]
			[/for]
		[/for]
	[/if]
[/for]
[/template]
