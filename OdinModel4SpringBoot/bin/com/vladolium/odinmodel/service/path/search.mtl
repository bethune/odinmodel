[comment encoding = UTF-8 /]
[module search('http://www.eclipse.org/uml2/5.0.0/UML')]

[comment: base template /]
[template public search(aClass : Class){
	entity 		: String = aClass.name.toUpperFirst();}]
[comment : search all/]
Iterable<[entity/]> search(
	[searchParameters(aClass)/]
);

[comment : search all with pagination /]
Page<[entity/]> searchPagination(
	Pageable page,
	[searchParameters(aClass)/]
);
[/template]

[comment:
----------------------------------------------------------------------------------------------------
subtemplates
----------------------------------------------------------------------------------------------------
/]

[template public searchParameters(aClass : Class){
	entity 		: String = aClass.name.toUpperFirst();}]
[comment: foreign keys/]
[for (p : Property | aClass.getAssociations().memberEnd)]
	[comment : ManyToOne/]
	[if (p.lower = 0 or p.lower = 1) and p.upper = -1 and p.type.name.toUpperFirst() = entity and 
		p.namespace = association and p.opposite.lower = 1 and p.opposite.upper = 1]
		[for (pack : Package | aClass._package)]
			[for (m : Class | pack.member -> filter(Class))]
				[if (m.name.toLower() <> aClass.name.toLower()) and (m.name.toLower() = p.opposite.type.name.toLower())]
					[for (a: Property | m.getAllAttributes()->removeAll(m.getAssociations().memberEnd)) separator('\n')]
						[if a.isID = true]
[a.type.name.toUpperFirst()/] [p.opposite.type.name.toLowerFirst()/][a.name.toUpperFirst()/],
						[/if]
					[/for]
				[/if]
			[/for]
		[/for]
	[/if]
	[comment : OneToOne/]
	[if p.lower = 1 and p.upper = 1 and p.type.name.toUpperFirst() = entity and 
		p.namespace = association and p.opposite.lower = 1 and p.opposite.upper = 1]
		[for (pack : Package | aClass._package)]
			[for (m : Class | pack.member -> filter(Class))]
				[if (m.name.toLower() <> aClass.name.toLower()) and (m.name.toLower() = p.opposite.type.name.toLower())]
					[for (a: Property | m.getAllAttributes()->removeAll(m.getAssociations().memberEnd)) separator('\n')]
						[if a.isID = true]
[a.type.name.toUpperFirst()/] [p.opposite.type.name.toLowerFirst()/][a.name.toUpperFirst()/],
						[/if]
					[/for]
				[/if]
			[/for]
		[/for]
	[/if]
	[comment : ManyToMany/]
	[if p.lower = 0 and p.upper = -1 and p.type.name.toUpperFirst() = entity and 
		p.namespace = association and p.opposite.lower = 0 and p.opposite.upper = -1]
		[for (pack : Package | aClass._package)]
			[for (m : Class | pack.member -> filter(Class))]
				[if (m.name.toLower() <> aClass.name.toLower()) and (m.name.toLower() = p.opposite.type.name.toLower())]
					[for (a: Property | m.getAllAttributes()->removeAll(m.getAssociations().memberEnd)) separator('\n')]
						[if a.isID = true]
Set<[a.type.name.toUpperFirst()/]> [p.opposite.type.name.toLowerFirst()/]Set,
						[/if]
					[/for]
				[/if]
			[/for]
		[/for]
	[/if]
	[comment : OneToMany/]
	[if p.lower = 1 and p.upper = 1 and p.type.name.toUpperFirst() = entity and 
		p.namespace = association and p.opposite.lower = 0 and p.opposite.upper = -1]
List<[p.opposite.type.name.toUpperFirst()/]> [p.opposite.type.name.toLowerFirst()/]List,
	[/if]
[/for]
[comment: fields/]
[for (p: Property | aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)->select(p | p.isID = false)) ]
	[if p.type.name = 'Date']
LocalDate [p.name.toLowerFirst()/][if aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)->size()-1 > i],[else][/if]
	[/if]
	[if p.type.name = 'Time']
LocalTime [p.name.toLowerFirst()/][if aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)->size()-1 > i],[else][/if]
	[/if]
	[if p.type.name = 'DateTime']
LocalDateTime [p.name.toLowerFirst()/][if aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)->size()-1 > i],[else][/if]
	[/if]
	[if p.type.name = 'Timestamp']
Instant [p.name.toLowerFirst()/][if aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)->size()-1 > i],[else][/if]
	[/if]
	[if p.type.name = 'Blob']
byte['['/][']'/] [p.name.toLowerFirst()/][if aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)->size()-1 > i],[else][/if]
	[/if]
	[if p.type.name = 'Clob']
String [p.name.toLowerFirst()/][if aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)->size()-1 > i],[else][/if]
	[/if]
	[if p.type.name <> 'Date' and p.type.name <> 'Time' and p.type.name <> 'DateTime' and p.type.name <> 'Timestamp' and p.type.name <> 'Blob' and p.type.name <> 'Clob']
[p.type.name.toUpperFirst()/] [p.name.toLowerFirst()/][if aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)->size()-1 > i],[else][/if]
	[/if]
[/for]
[/template]