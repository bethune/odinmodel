[comment encoding = UTF-8 /]
[module search('http://www.eclipse.org/uml2/5.0.0/UML')]
[comment:
----------------------------------------------------------------------------------------------------/]
[comment: main template /]
[template public search(aClass : Class){
	entity 		: String = aClass.name.toUpperFirst();
	property	: String = aClass.name.toLowerFirst();}]
[comment:
----------------------------------------------------------------------------------------------------/]
[comment: Search all where parameter equals /]
@GetMapping("/search")
public Iterable<[entity/]> search(
	[requestForeignKeys(aClass)/]
	[requestFields(aClass)/]
) {
	return [property/]Service.search(
		[foreignKeys(aClass)/]
		[fields(aClass)/]
	);
}
[comment:
----------------------------------------------------------------------------------------------------/]
[comment: Search all with pagination where parameter equals /]

[/template]
[comment:
|
|				N E X T		S U B T E M P L A T E
|
/]
[comment:
----------------------------------------------------------------------------------------------------/]
[comment: 4 subtemplates follows /]
[comment: 1st /]
[template public requestForeignKeys(aClass : Class){
	entity 	: String = aClass.name.toUpperFirst();}]
[for (p : Property | aClass.getAssociations().memberEnd)]
	[comment : ManyToOne/]
	[if p.lower = 0 and p.upper = -1 and p.type.name.toUpperFirst() = entity and 
		p.namespace = association and p.opposite.lower = 1 and p.opposite.upper = 1]
		[for (pack : Package | aClass._package)]
			[for (m : Class | pack.member -> filter(Class))]
				[if (m.name.toLower() <> aClass.name.toLower()) and (m.name.toLower() = p.opposite.type.name.toLower())]
					[for (a: Property | m.getAllAttributes()->removeAll(m.getAssociations().memberEnd)) separator('\n')]
						[if a.isID = true]
@RequestParam(value = "[p.opposite.type.name.toLowerFirst()/][a.name.toUpperFirst()/]", required = false) [a.type.name.toUpperFirst()/] [p.opposite.type.name.toLowerFirst()/][a.name.toUpperFirst()/],
						[/if]
					[/for]
				[/if]
			[/for]
		[/for]
	[/if]
	[comment : OneToOne/]
	[if p.lower = 1 and p.upper = 1 and p.type.name.toUpperFirst() = aClass.name.toUpperFirst() and 
		p.namespace = association and p.opposite.lower = 1 and p.opposite.upper = 1]
		[for (pack : Package | aClass._package)]
			[for (m : Class | pack.member -> filter(Class))]
				[if (m.name.toLower() <> aClass.name.toLower()) and (m.name.toLower() = p.opposite.type.name.toLower())]
					[for (a: Property | m.getAllAttributes()->removeAll(m.getAssociations().memberEnd)) separator('\n')]
						[if a.isID = true]
@RequestParam(value = "[p.opposite.type.name.toLowerFirst()/][a.name.toUpperFirst()/]", required = false) [a.type.name.toUpperFirst()/] [p.opposite.type.name.toLowerFirst()/][a.name.toUpperFirst()/],
						[/if]
					[/for]
				[/if]
			[/for]
		[/for]
	[/if]
	[comment : ManyToMany/]
	[if p.lower = 0 and p.upper = -1 and p.type.name.toUpperFirst() = aClass.name.toUpperFirst() and 
		p.namespace = association and p.opposite.lower = 0 and p.opposite.upper = -1]
		[for (pack : Package | aClass._package)]
			[for (m : Class | pack.member -> filter(Class))]
				[if (m.name.toLower() <> aClass.name.toLower()) and (m.name.toLower() = p.opposite.type.name.toLower())]
					[for (a: Property | m.getAllAttributes()->removeAll(m.getAssociations().memberEnd)) separator('\n')]
						[if a.isID = true]
@RequestParam(value = "[p.opposite.type.name.toLowerFirst()/]Set['['/][']'/]", required = false) Set<[a.type.name.toUpperFirst()/]> [p.opposite.type.name.toLowerFirst()/]Set,
						[/if]
					[/for]
				[/if]
			[/for]
		[/for]
	[/if]
	[comment : OneToMany/]
	[if p.lower = 1 and p.upper = 1 and p.type.name.toUpperFirst() = aClass.name.toUpperFirst() and 
		p.namespace = association and p.opposite.lower = 0 and p.opposite.upper = -1]
@RequestParam(value = "[p.opposite.type.name.toLowerFirst()/]List", required = false) List<[p.opposite.type.name.toUpperFirst()/]> [p.opposite.type.name.toLowerFirst()/]List,
	[/if]
[/for]
[/template]
[comment:
|
|				N E X T		S U B T E M P L A T E
|
/]
[comment:
----------------------------------------------------------------------------------------------------/]
[comment: 2nd /]
[template public requestFields(aClass : Class)]
[for (p: Property | aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)->select(p | p.isID = false)) ]
	[if p.type.name = 'Date']
@RequestParam(value = "[p.name.toLowerFirst()/]", required = false) @DateTimeFormat(pattern = "yyyy-MM-dd") LocalDate [p.name.toLowerFirst()/][if aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)->size()-1 > i],[else][/if]
	[/if]
	[if p.type.name = 'Time']
@RequestParam(value = "[p.name.toLowerFirst()/]", required = false) @DateTimeFormat(pattern = "HH:mm") LocalTime [p.name.toLowerFirst()/][if aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)->size()-1 > i],[else][/if]
	[/if]
	[if p.type.name = 'DateTime']
@RequestParam(value = "[p.name.toLowerFirst()/]", required = false) @DateTimeFormat(pattern = "yyyy-MM-dd HH:mm") LocalDateTime [p.name.toLowerFirst()/][if aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)->size()-1 > i],[else][/if]
	[/if]
	[if p.type.name = 'Timestamp']
@RequestParam(value = "[p.name.toLowerFirst()/]", required = false) Instant [p.name.toLowerFirst()/][if aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)->size()-1 > i],[else][/if]
	[/if]
	[if p.type.name = 'Blob']
@RequestParam(value = "[p.name.toLowerFirst()/]", required = false) byte['['/][']'/] [p.name.toLowerFirst()/][if aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)->size()-1 > i],[else][/if]
	[/if]
	[if p.type.name = 'Clob']
@RequestParam(value = "[p.name.toLowerFirst()/]", required = false) String [p.name.toLowerFirst()/][if aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)->size()-1 > i],[else][/if]
	[/if]
	[if p.type.name <> 'Date' and p.type.name <> 'Time' and p.type.name <> 'DateTime' and p.type.name <> 'Timestamp' and p.type.name <> 'Blob' and p.type.name <> 'Clob']
@RequestParam(value = "[p.name.toLowerFirst()/]", required = false) [p.type.name.toUpperFirst()/] [p.name.toLowerFirst()/][if aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)->size()-1 > i],[else][/if]
	[/if]
[/for]
[/template]
[comment:
|
|				N E X T		S U B T E M P L A T E
|
/]
[comment:
----------------------------------------------------------------------------------------------------/]
[comment: 3rd /]
[template public foreignKeys(aClass : Class){
	entity 	: String = aClass.name.toUpperFirst();}]
[for (p : Property | aClass.getAssociations().memberEnd)]
	[comment : ManyToOne/]
	[if p.lower = 0 and p.upper = -1 and p.type.name.toUpperFirst() = aClass.name.toUpperFirst() and 
		p.namespace = association and p.opposite.lower = 1 and p.opposite.upper = 1]
		[for (pack : Package | aClass._package)]
			[for (m : Class | pack.member -> filter(Class))]
				[if (m.name.toLower() <> aClass.name.toLower()) and (m.name.toLower() = p.opposite.type.name.toLower())]
					[for (a: Property | m.getAllAttributes()->removeAll(m.getAssociations().memberEnd)) separator('\n')]
						[if a.isID = true]
[p.opposite.type.name.toLowerFirst()/][a.name.toUpperFirst()/],
						[/if]
					[/for]
				[/if]
			[/for]
		[/for]
	[/if]
	[comment : OneToOne/]
	[if p.lower = 1 and p.upper = 1 and p.type.name.toUpperFirst() = aClass.name.toUpperFirst() and 
		p.namespace = association and p.opposite.lower = 1 and p.opposite.upper = 1]
		[for (pack : Package | aClass._package)]
			[for (m : Class | pack.member -> filter(Class))]
				[if (m.name.toLower() <> aClass.name.toLower()) and (m.name.toLower() = p.opposite.type.name.toLower())]
					[for (a: Property | m.getAllAttributes()->removeAll(m.getAssociations().memberEnd)) separator('\n')]
						[if a.isID = true]
[p.opposite.type.name.toLowerFirst()/][a.name.toUpperFirst()/],
						[/if]
					[/for]
				[/if]
			[/for]
		[/for]
	[/if]
	[comment : ManyToMany/]
	
	[if p.lower = 0 and p.upper = -1 and p.type.name.toUpperFirst() = aClass.name.toUpperFirst() and 
		p.namespace = association and p.opposite.lower = 0 and p.opposite.upper = -1]
[p.opposite.type.name.toLowerFirst()/]Set,
	[/if]
	[comment : OneToMany/]
	[if p.lower = 1 and p.upper = 1 and p.type.name.toUpperFirst() = aClass.name.toUpperFirst() and 
		p.namespace = association and p.opposite.lower = 0 and p.opposite.upper = -1]
[p.opposite.type.name.toLowerFirst()/]List,
	[/if]
[/for]
[/template]
[comment:
|
|				N E X T		S U B T E M P L A T E
|
/]
[comment:
----------------------------------------------------------------------------------------------------/]
[comment: 4th /]
[template public fields(aClass : Class)]
[for (p: Property | aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)->select(p | p.isID = false)) ]
[p.name.toLowerFirst()/][if aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)->size()-1 > i],[else][/if]
[/for]
[/template]