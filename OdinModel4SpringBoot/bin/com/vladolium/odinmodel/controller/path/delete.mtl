[comment encoding = UTF-8 /]
[module delete('http://www.eclipse.org/uml2/5.0.0/UML')]

[template public delete(aClass : Class){
	entity 		: String = aClass.name.toUpperFirst();
	property	: String = aClass.name.toLowerFirst();}]
[comment: Delete one by id /]
[for (p: Property | aClass.getAllAttributes()) separator('\n')]
	[if p.isID = true]
@DeleteMapping("/{[p.name.toLowerFirst()/]}")
public void deleteOneBy[p.name.toUpperFirst()/](@PathVariable [p.type.name.toUpperFirst()/] [p.name.toLowerFirst()/]) {
	[property/]Service.deleteOneBy[p.name.toUpperFirst()/]([p.name.toLowerFirst()/]);
}
	[/if]
[/for]

[for (p1: Property | aClass.getAllAttributes()) separator('\n')]
	[if p1.isID = true]
		[for (p : Property | aClass.getAssociations().memberEnd)]
			[comment: IRIC for manyToOne /]
			[if p.lower = 1 and p.upper = -1 and p.type.name.toUpperFirst() = entity and 
				p.namespace = association and p.opposite.lower = 1 and p.opposite.upper = 1]
				[for (pack : Package | aClass._package)]
					[for (m : Class | pack.member -> filter(Class))]
						[if (m.name.toLower() <> aClass.name.toLower()) and (m.name.toLower() = p.opposite.type.name.toLower())]
							[for (a: Property | m.getAllAttributes()->removeAll(m.getAssociations().memberEnd)) separator('\n')]
								[if a.isID = true]
@DeleteMapping("/{[p1.name.toLowerFirst()/]}/[p.opposite.type.name.toLowerFirst()/]")
public void deleteOneBy[p1.name.toUpperFirst()/]Iric(@PathVariable [p1.type.name.toUpperFirst()/] [p1.name.toLowerFirst()/]) {
	[entity/] current = [property/]Service.readOneBy[p1.name.toUpperFirst()/]([p1.name.toLowerFirst()/]);
	Iterable<[entity/]> listOf[entity/] = [property/]Service
		.readAllBy[p.opposite.type.name.toUpperFirst()/][a.name.toUpperFirst()/](current.get[p.opposite.type.name.toUpperFirst()/]().get[a.name.toUpperFirst()/]());
	Long size = listOf[entity/].spliterator().getExactSizeIfKnown();
	if (size == 1) {
	    return;
	} else {
	    [property/]Service.deleteOneBy[p1.name.toUpperFirst()/]([p1.name.toLowerFirst()/]);
	}
}
								[/if]
							[/for]
						[/if]
					[/for]
				[/for]
			[/if]
		[/for]
	[/if]
[/for]
[/template]
