[comment encoding = UTF-8 /]
[module create('http://www.eclipse.org/uml2/5.0.0/UML')]

[comment]
	OdinModel is a framework for transforming a custom web application development into a model-driven rapid prototyping approach

    Copyright (C) 2019  Vladolium

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see https://www.gnu.org/licenses/.
[/comment]

[template public create(aClass : Class){
	type 		: String = aClass.name.toUpperFirst();
	parameter	: String = aClass.name.toLowerFirst();}]
[comment][createRequests(aClass)/][/comment]

private [type/] [parameter/];

[comment: Create one /]
public [type/] createOne() {
	return [parameter/]Service.createUpdate([parameter/]);
}

[comment: Create one with IRIC /]
[for (relationship : Property | aClass.getAssociations().memberEnd)]
	[comment: IRIC for manyToOne relationships/]
	[if relationship.lower = 1 and relationship.upper = -1 and relationship.opposite.type.name.toUpperFirst() = type and 
		relationship.namespace = association and relationship.opposite.lower = 1 and relationship.opposite.upper = 1]
private [type/][relationship.type.name.toUpperFirst()/] [parameter/][relationship.type.name.toUpperFirst()/];

public [type/] createOneIric() {
	return [parameter/]Service.createOneIric([parameter/][relationship.type.name.toUpperFirst()/]);
}
	[/if]
[/for]
[/template]

[comment:
----------------------------------------------------------------------------------------------------
subtemplates
----------------------------------------------------------------------------------------------------
/]

[template public createRequests(aClass : Class){
	type 		: String = aClass.name.toUpperFirst();}]
[comment: foreign keys/]
[for (relationship : Property | aClass.getAssociations().memberEnd)]
	[comment : ManyToOne/]
	[if (relationship.lower = 0 or relationship.lower = 1) and relationship.upper = -1 and relationship.type.name.toUpperFirst() = type and 
		relationship.namespace = association and relationship.opposite.lower = 1 and relationship.opposite.upper = 1]
		[for (p : Package | aClass._package)]
			[for (oppositeEntity : Class | p.member -> filter(Class))]
				[if (oppositeEntity.name.toLower() <> aClass.name.toLower()) and (oppositeEntity.name.toLower() = relationship.opposite.type.name.toLower())]
					[for (oppositeEntityField: Property | oppositeEntity.getAllAttributes()->removeAll(oppositeEntity.getAssociations().memberEnd)) separator('\n')]
						[if oppositeEntityField.isID = true]
private [oppositeEntityField.type.name.toUpperFirst()/] [relationship.opposite.type.name.toLowerFirst()/][oppositeEntityField.name.toUpperFirst()/];
						[/if]
					[/for]
				[/if]
			[/for]
		[/for]
	[/if]
	[comment : OneToOne/]
	[if (relationship.lower = 0 or relationship.lower = 1) and relationship.upper = 1 and relationship.type.name.toUpperFirst() = type and 
		relationship.namespace = association and relationship.opposite.lower = 1 and relationship.opposite.upper = 1]
		[for (p : Package | aClass._package)]
			[for (oppositeEntity : Class | p.member -> filter(Class))]
				[if (oppositeEntity.name.toLower() <> aClass.name.toLower()) and (oppositeEntity.name.toLower() = relationship.opposite.type.name.toLower())]
					[for (oppositeEntityField: Property | oppositeEntity.getAllAttributes()->removeAll(oppositeEntity.getAssociations().memberEnd)) separator('\n')]
						[if oppositeEntityField.isID = true]
private [oppositeEntityField.type.name.toUpperFirst()/] [relationship.opposite.type.name.toLowerFirst()/][oppositeEntityField.name.toUpperFirst()/];
						[/if]
					[/for]
				[/if]
			[/for]
		[/for]
	[/if]
	[comment : ManyToMany/]
	[if relationship.lower = 0 and relationship.upper = -1 and relationship.type.name.toUpperFirst() = type and 
		relationship.namespace = association and relationship.opposite.lower = 0 and relationship.opposite.upper = -1]
		[for (p : Package | aClass._package)]
			[for (oppositeEntity : Class | p.member -> filter(Class))]
				[if (oppositeEntity.name.toLower() <> aClass.name.toLower()) and (oppositeEntity.name.toLower() = relationship.opposite.type.name.toLower())]
					[for (oppositeEntityField: Property | oppositeEntity.getAllAttributes()->removeAll(oppositeEntity.getAssociations().memberEnd)) separator('\n')]
						[if oppositeEntityField.isID = true]
private Set<[oppositeEntityField.type.name.toUpperFirst()/]> [relationship.opposite.type.name.toLowerFirst()/]Set;
						[/if]
					[/for]
				[/if]
			[/for]
		[/for]
	[/if]
	[comment : OneToMany/]
	[if relationship.lower = 1 and relationship.upper = 1 and relationship.type.name.toUpperFirst() = type and 
		relationship.namespace = association and relationship.opposite.lower = 0 and relationship.opposite.upper = -1]
private List<[relationship.opposite.type.name.toUpperFirst()/]> [relationship.opposite.type.name.toLowerFirst()/]List;
	[/if]
[/for]
[comment: fields/]
[for (field: Property | aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)->select(field | field.isID = false)) ]
	[if field.type.name = 'Date']
private LocalDate [field.name.toLowerFirst()/];
	[/if]
	[if field.type.name = 'Time']
private LocalTime [field.name.toLowerFirst()/];
	[/if]
	[if field.type.name = 'DateTime']
private LocalDateTime [field.name.toLowerFirst()/];
	[/if]
	[if field.type.name = 'Timestamp']
private Instant [field.name.toLowerFirst()/];
	[/if]
	[if field.type.name = 'Blob']
private byte['['/][']'/] [field.name.toLowerFirst()/];
	[/if]
	[if field.type.name = 'Clob']
private String [field.name.toLowerFirst()/];
	[/if]
	[if field.type.name <> 'Date' and field.type.name <> 'Time' and field.type.name <> 'DateTime' and field.type.name <> 'Timestamp' and field.type.name <> 'Blob' and field.type.name <> 'Clob']
private [field.type.name.toUpperFirst()/] [field.name.toLowerFirst()/];
	[/if]
[/for]
[/template]

[comment:----------------------------------------------------------------------------------------------------/]

[template public createParameters(aClass : Class){
	type 		: String = aClass.name.toUpperFirst();}]
[comment: foreign keys/]
[for (relationship: Property | aClass.getAssociations().memberEnd)]
	[comment : ManyToOne/]
	[if (relationship.lower = 0 or relationship.lower = 1) and relationship.upper = -1 and relationship.type.name.toUpperFirst() = type and 
		relationship.namespace = association and relationship.opposite.lower = 1 and relationship.opposite.upper = 1]
		[for (p : Package | aClass._package)]
			[for (oppositeEntity : Class | p.member -> filter(Class))]
				[if (oppositeEntity.name.toLower() <> aClass.name.toLower()) and (oppositeEntity.name.toLower() = relationship.opposite.type.name.toLower())]
					[for (oppositeEntityField: Property | oppositeEntity.getAllAttributes()->removeAll(oppositeEntity.getAssociations().memberEnd)) separator('\n')]
						[if oppositeEntityField.isID = true]
[relationship.opposite.type.name.toLowerFirst()/][oppositeEntityField.name.toUpperFirst()/],
						[/if]
					[/for]
				[/if]
			[/for]
		[/for]
	[/if]
	[comment : OneToOne/]
	[if (relationship.lower = 0 or relationship.lower = 1) and relationship.upper = 1 and relationship.type.name.toUpperFirst() = type and 
		relationship.namespace = association and relationship.opposite.lower = 1 and relationship.opposite.upper = 1]
		[for (p : Package | aClass._package)]
			[for (oppositeEntity : Class | p.member -> filter(Class))]
				[if (oppositeEntity.name.toLower() <> aClass.name.toLower()) and (oppositeEntity.name.toLower() = relationship.opposite.type.name.toLower())]
					[for (oppositeEntityField: Property | oppositeEntity.getAllAttributes()->removeAll(oppositeEntity.getAssociations().memberEnd)) separator('\n')]
						[if oppositeEntityField.isID = true]
[relationship.opposite.type.name.toLowerFirst()/][oppositeEntityField.name.toUpperFirst()/],
						[/if]
					[/for]
				[/if]
			[/for]
		[/for]
	[/if]
	[comment : ManyToMany/]
	[if relationship.lower = 0 and relationship.upper = -1 and relationship.type.name.toUpperFirst() = type and 
		relationship.namespace = association and relationship.opposite.lower = 0 and relationship.opposite.upper = -1]
[relationship.opposite.type.name.toLowerFirst()/]Set,
	[/if]
	[comment : OneToMany/]
	[if relationship.lower = 1 and relationship.upper = 1 and relationship.type.name.toUpperFirst() = type and 
		relationship.namespace = association and relationship.opposite.lower = 0 and relationship.opposite.upper = -1]
[relationship.opposite.type.name.toLowerFirst()/]List,
	[/if]
[/for]
[comment: fields/]
[for (field: Property | aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)->select(field | field.isID = false)) ]
[field.name.toLowerFirst()/][if aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)->size()-1 > i],[else][/if]
[/for]
[/template]