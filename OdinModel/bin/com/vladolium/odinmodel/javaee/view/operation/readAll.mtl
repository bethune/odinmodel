[comment encoding = UTF-8 /]
[module readAll('http://www.eclipse.org/uml2/5.0.0/UML')]

[comment]
	OdinModel is a framework for transforming a custom web application development into a model-driven rapid prototyping approach

    Copyright (C) 2019  Vladolium

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see https://www.gnu.org/licenses/.
[/comment]

[template public readAll(aClass : Class){
	type 		: String = aClass.name.toUpperFirst();
	parameter	: String = aClass.name.toLowerFirst();}]
[comment: Read all /]
public Iterable<[type/]> readAll() {
	return [parameter/]Service.readAll();
}

[comment: Read all with pagination /]
public Page<[type/]> readAllPagination(
	Integer pageNumber,
	Integer perPageNumber
) {
	Pageable page = PageRequest.of(pageNumber, perPageNumber);
	return [parameter/]Service.readAllPagination(page);
}

[comment: Read all by parent id in many to one relationship /]
[for (pack : Package | aClass._package)]
	[for (oppositeEntity : Class | pack.member -> filter(Class))]
		[if oppositeEntity.name.toLower() <> aClass.name.toLower()]
			[for (oppositeEntityRelationship : Property | oppositeEntity.getAssociations().memberEnd)]
				[if (oppositeEntityRelationship.lower = 0 or oppositeEntityRelationship.lower = 1) and oppositeEntityRelationship.upper = -1 and oppositeEntityRelationship.type.name.toUpperFirst() = oppositeEntity.name.toUpperFirst() and oppositeEntityRelationship.opposite.type.name.toUpperFirst() = type and 
					oppositeEntityRelationship.namespace = association and oppositeEntityRelationship.opposite.lower = 1 and oppositeEntityRelationship.opposite.upper = 1]
@Inject
private [oppositeEntityRelationship.type.name.toUpperFirst()/]Service [oppositeEntityRelationship.type.name.toLowerFirst()/]Service;

					[comment: By parent id /]
					[for (field: Property | aClass.getAllAttributes()) separator('\n')]
						[if field.isID = true]
[comment: Read all by parent id /]
public Iterable<[oppositeEntityRelationship.type.name.toUpperFirst()/]> readAll[oppositeEntityRelationship.type.name.toUpperFirst()/]By[oppositeEntityRelationship.opposite.type.name.toUpperFirst()/][field.name.toUpperFirst()/]([field.type.name.toUpperFirst()/] [oppositeEntityRelationship.opposite.type.name.toLowerFirst()/][field.name.toUpperFirst()/]) {
	return [oppositeEntityRelationship.type.name.toLowerFirst()/]Service.readAllBy[oppositeEntityRelationship.opposite.type.name.toUpperFirst()/][field.name.toUpperFirst()/]([oppositeEntityRelationship.opposite.type.name.toLowerFirst()/][field.name.toUpperFirst()/]);
}

[comment: Read all by parent id with pagination /]
public Page<[oppositeEntityRelationship.type.name.toUpperFirst()/]> readAll[oppositeEntityRelationship.type.name.toUpperFirst()/]By[oppositeEntityRelationship.opposite.type.name.toUpperFirst()/][field.name.toUpperFirst()/]Pagination(
	Integer pageNumber,
	Integer perPageNumber,
	[field.type.name.toUpperFirst()/] [oppositeEntityRelationship.opposite.type.name.toLowerFirst()/][field.name.toUpperFirst()/]
) {
	Pageable page = PageRequest.of(pageNumber, perPageNumber);
	return [oppositeEntityRelationship.type.name.toLowerFirst()/]Service.readAllBy[oppositeEntityRelationship.opposite.type.name.toUpperFirst()/][field.name.toUpperFirst()/]([oppositeEntityRelationship.opposite.type.name.toLowerFirst()/][field.name.toUpperFirst()/], page);
}
						[/if]
					[/for]

					[comment: By parent unique field /]
					[for (oppositeEntityField: Property | aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)) separator('\n')]
						[if oppositeEntityField.isUnique = true and oppositeEntityField.isID = false]
[comment: Read all by parent unique field /]
public Iterable<[oppositeEntityRelationship.type.name.toUpperFirst()/]> readAll[oppositeEntityRelationship.type.name.toUpperFirst()/]By[oppositeEntityRelationship.opposite.type.name.toUpperFirst()/][oppositeEntityField.name.toUpperFirst()/]([oppositeEntityField.type.name.toUpperFirst()/] [oppositeEntityRelationship.opposite.type.name.toLowerFirst()/][oppositeEntityField.name.toUpperFirst()/]) {
	return [oppositeEntityRelationship.type.name.toLowerFirst()/]Service.readAllBy[oppositeEntityRelationship.opposite.type.name.toUpperFirst()/][oppositeEntityField.name.toUpperFirst()/]([oppositeEntityRelationship.opposite.type.name.toLowerFirst()/][oppositeEntityField.name.toUpperFirst()/]);
}

[comment: Read all by parent unique field with pagination /]
public Page<[oppositeEntityRelationship.type.name.toUpperFirst()/]> readAll[oppositeEntityRelationship.type.name.toUpperFirst()/]By[oppositeEntityRelationship.opposite.type.name.toUpperFirst()/][oppositeEntityField.name.toUpperFirst()/]Pagination(
	Integer pageNumber,
	Integer perPageNumber,
	[oppositeEntityField.type.name.toUpperFirst()/] [oppositeEntityRelationship.opposite.type.name.toLowerFirst()/][oppositeEntityField.name.toUpperFirst()/]
) {
	Pageable page = PageRequest.of(pageNumber, perPageNumber);
	return [oppositeEntityRelationship.type.name.toLowerFirst()/]Service.readAllBy[oppositeEntityRelationship.opposite.type.name.toUpperFirst()/][oppositeEntityField.name.toUpperFirst()/]([oppositeEntityRelationship.opposite.type.name.toLowerFirst()/][oppositeEntityField.name.toUpperFirst()/], page);
}
						[/if]
					[/for]
				[/if]
			[/for]
		[/if]
	[/for]
[/for]
[/template]
