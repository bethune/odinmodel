[comment]
	OdinModel is a free and open-source framework for transforming a custom web application development 
	into a model-driven rapid prototyping approach.

    Copyright (C) 2020  Vladolium

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and 
	associated documentation files (the "Software"), to deal in the Software without restriction, 
	including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or 
	sell copies of the Software, and to permit persons to whom the Software is furnished to do so, 
	subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
	WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
	COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
[/comment]

[comment encoding = UTF-8 /]
[module applicationProperties('http://www.eclipse.org/uml2/5.0.0/UML')]

[**
 * Project structure setting
 * 
 * OMPOC (OdinModel Point Of Customization) 
 * 
 * User may further customize appplication properties for the target project.
 *  
 * @param class represents the current class from the UML class diagram i.e. the domain model.
*/]
[template public applicationProperties(class : Class)]
[file ('src/main/resources/application.properties', false, 'UTF-8')]
#Code between start and end will not be removed during generation.
#[protected ('for this application.properties')]

#-- HINT: define server port
server.port=5000

#-- HINT: Log Level may be ERROR, WARN, INFO (for production), DEBUG, or TRACE
logging.level.org.springframework.web=DEBUG

#----------------------------------------

#--------- H2 embedded setup -----------

#-- HINT: enable h2 console with true; disable with false
spring.h2.console.enabled=true

#-- HINT: set console path
spring.h2.console.path=/h2

#-- HINT: set schema-name and local path for database file
#-- HINT: when using the URL jdbc:h2:file:./data/sample, the database is stored in the directory data (relative to the current working directory). The directory is created automatically if it does not yet exist.
#-- HINT: an example for using the fully qualified directory name (and for Windows, drive name) is jdbc:h2:file:c:/h2/schema-name
spring.datasource.url=jdbc:h2:file:./h2data/classicCars

#-- HINT: add username
spring.datasource.username=

#-- HINT: add password
spring.datasource.password=

#-- HINT: h2 driver
spring.datasource.driver-class-name=org.h2.Driver

#-- HINT: allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.H2Dialect

#----------------------------------------

#--------- MySQL embedded setup ---------

#-- HINT: set database path and schema name
#spring.datasource.url= jdbc:mysql://localhost:3306/schema-name?verifyServerCertificate=false&useSSL=true

#-- HINT: add username
#spring.datasource.username=

#-- HINT: add password
#spring.datasource.password=

#spring.datasource.driver-class-name=com.mysql.jdbc.Driver

#-- HINT: allows Hibernate to generate SQL optimized for a particular DBMS
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

#-----------------------------------------

#--------- PostgreSQL embedded setup ---------

#-- HINT: set database path and schema name
#spring.datasource.url= jdbc:postgresql://localhost:5432/schema-name?verifyServerCertificate=false&useSSL=true

#-- HINT: add username
#spring.datasource.username=

#-- HINT: add password
#spring.datasource.password=

#spring.datasource.driver-class-name=org.postgresql.Driver

#-- HINT: allows Hibernate to generate SQL optimized for a particular DBMS
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

#-----------------------------------------

#--------- JPA Hibernate setup ---------

#-- HINT: true or false
spring.jpa.show-sql = false

#-- HINT: Hibernate ddl auto (create, create-drop, update, none, validate)
spring.jpa.hibernate.ddl-auto = update

spring.jackson.serialization.fail-on-empty-beans=false

#----------------------------------------

#[/protected]
[/file]
[/template]