[comment encoding = UTF-8 /]
[module searchQueryDSL('http://www.eclipse.org/uml2/5.0.0/UML')]

[comment]

	OdinModel is a framework for transforming a custom web application development into a model-driven rapid prototyping approach

    Copyright (C) 2019  Vladolium

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see https://www.gnu.org/licenses/.

[/comment]

[comment: base template /]
[template public searchQueryDSL(aClass : Class){
	type 		: String = aClass.name.toUpperFirst();
	parameter	: String = aClass.name.toLowerFirst();}]
[comment : search all/]
@Override
public Iterable<[type/]> search(
	[searchParameters(aClass)/]
) {
	BooleanBuilder where = dynamicWhere(
		[queryParameters(aClass)/]	
	);
	return [parameter/]Repository.findAll(where);
}

[comment : search all with pagination /]
@Override
public Page<[type/]> searchPagination(
	Pageable page,
	[searchParameters(aClass)/]
) {
	BooleanBuilder where = dynamicWhere(
		[queryParameters(aClass)/]
	);
	return [parameter/]Repository.findAll(where, page);
}

[comment : building dynamic query/]
public BooleanBuilder dynamicWhere(
	[searchParameters(aClass)/]
) {
	Q[type/] q[type/] = Q[type/].[parameter/];

	BooleanBuilder where = new BooleanBuilder();

	[queryBuilderParameters(aClass)/]

	return where;
}

[/template]

[comment:
----------------------------------------------------------------------------------------------------
subtemplates
----------------------------------------------------------------------------------------------------
/]

[template public searchParameters(aClass : Class){
	type 		: String = aClass.name.toUpperFirst();}]
[comment: foreign keys/]
[for (relationship : Property | aClass.getAssociations().memberEnd)]
	[comment : ManyToOne/]
	[if (relationship.lower = 0 or relationship.lower = 1) and relationship.upper = -1 and relationship.type.name.toUpperFirst() = type and 
		relationship.namespace = association and relationship.opposite.lower = 1 and relationship.opposite.upper = 1]
		[for (p : Package | aClass._package)]
			[for (oppositeEntity : Class | p.member -> filter(Class))]
				[if (oppositeEntity.name.toLower() <> aClass.name.toLower()) and (oppositeEntity.name.toLower() = relationship.opposite.type.name.toLower())]
					[for (oppositeEntityField: Property | oppositeEntity.getAllAttributes()->removeAll(oppositeEntity.getAssociations().memberEnd)) separator('\n')]
						[if oppositeEntityField.isID = true]
[oppositeEntityField.type.name.toUpperFirst()/] [relationship.opposite.type.name.toLowerFirst()/][oppositeEntityField.name.toUpperFirst()/],
						[/if]
					[/for]
				[/if]
			[/for]
		[/for]
	[/if]
	[comment : OneToOne/]
	[if (relationship.lower = 0 or relationship.lower = 1) and relationship.upper = 1 and relationship.type.name.toUpperFirst() = type and 
		relationship.namespace = association and relationship.opposite.lower = 1 and relationship.opposite.upper = 1]
		[for (p : Package | aClass._package)]
			[for (oppositeEntity : Class | p.member -> filter(Class))]
				[if (oppositeEntity.name.toLower() <> aClass.name.toLower()) and (oppositeEntity.name.toLower() = relationship.opposite.type.name.toLower())]
					[for (oppositeEntityField: Property | oppositeEntity.getAllAttributes()->removeAll(oppositeEntity.getAssociations().memberEnd)) separator('\n')]
						[if oppositeEntityField.isID = true]
[oppositeEntityField.type.name.toUpperFirst()/] [relationship.opposite.type.name.toLowerFirst()/][oppositeEntityField.name.toUpperFirst()/],
						[/if]
					[/for]
				[/if]
			[/for]
		[/for]
	[/if]
	[comment : ManyToMany/]
	[if relationship.lower = 0 and relationship.upper = -1 and relationship.type.name.toUpperFirst() = type and 
		relationship.namespace = association and relationship.opposite.lower = 0 and relationship.opposite.upper = -1]
		[for (p : Package | aClass._package)]
			[for (oppositeEntity : Class | p.member -> filter(Class))]
				[if (oppositeEntity.name.toLower() <> aClass.name.toLower()) and (oppositeEntity.name.toLower() = relationship.opposite.type.name.toLower())]
					[for (oppositeEntityField: Property | oppositeEntity.getAllAttributes()->removeAll(oppositeEntity.getAssociations().memberEnd)) separator('\n')]
						[if oppositeEntityField.isID = true]
Set<[oppositeEntityField.type.name.toUpperFirst()/]> [relationship.opposite.type.name.toLowerFirst()/]Set,
						[/if]
					[/for]
				[/if]
			[/for]
		[/for]
	[/if]
	[comment : OneToMany/]
	[if relationship.lower = 1 and relationship.upper = 1 and relationship.type.name.toUpperFirst() = type and 
		relationship.namespace = association and relationship.opposite.lower = 0 and relationship.opposite.upper = -1]
List<[relationship.opposite.type.name.toUpperFirst()/]> [relationship.opposite.type.name.toLowerFirst()/]List,
	[/if]
[/for]
[comment: fields/]
[for (field: Property | aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)->select(field | field.isID = false)) ]
	[if field.type.name = 'Date']
LocalDate [field.name.toLowerFirst()/][if aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)->size()-1 > i],[else][/if]
	[/if]
	[if field.type.name = 'Time']
LocalTime [field.name.toLowerFirst()/][if aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)->size()-1 > i],[else][/if]
	[/if]
	[if field.type.name = 'DateTime']
LocalDateTime [field.name.toLowerFirst()/][if aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)->size()-1 > i],[else][/if]
	[/if]
	[if field.type.name = 'Timestamp']
Instant [field.name.toLowerFirst()/][if aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)->size()-1 > i],[else][/if]
	[/if]
	[if field.type.name = 'Blob']
byte['['/][']'/] [field.name.toLowerFirst()/][if aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)->size()-1 > i],[else][/if]
	[/if]
	[if field.type.name = 'Clob']
String [field.name.toLowerFirst()/][if aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)->size()-1 > i],[else][/if]
	[/if]
	[if field.type.name <> 'Date' and field.type.name <> 'Time' and field.type.name <> 'DateTime' and field.type.name <> 'Timestamp' and field.type.name <> 'Blob' and field.type.name <> 'Clob']
[field.type.name.toUpperFirst()/] [field.name.toLowerFirst()/][if aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)->size()-1 > i],[else][/if]
	[/if]
[/for]
[/template]

[comment:----------------------------------------------------------------------------------------------------/]

[template public queryParameters(aClass : Class){
	type 		: String = aClass.name.toUpperFirst();}]
[comment: foreign keys/]
[for (p : Property | aClass.getAssociations().memberEnd)]
	[comment : ManyToOne/]
	[if (p.lower = 0 or p.lower = 1) and p.upper = -1 and p.type.name.toUpperFirst() = entity and 
		p.namespace = association and p.opposite.lower = 1 and p.opposite.upper = 1]
		[for (pack : Package | aClass._package)]
			[for (m : Class | pack.member -> filter(Class))]
				[if (m.name.toLower() <> aClass.name.toLower()) and (m.name.toLower() = p.opposite.type.name.toLower())]
					[for (a: Property | m.getAllAttributes()->removeAll(m.getAssociations().memberEnd)) separator('\n')]
						[if a.isID = true]
[p.opposite.type.name.toLowerFirst()/][a.name.toUpperFirst()/],
						[/if]
					[/for]
				[/if]
			[/for]
		[/for]
	[/if]
	[comment : OneToOne/]
	[if (p.lower = 0 or p.lower = 1) and p.upper = 1 and p.type.name.toUpperFirst() = entity and 
		p.namespace = association and p.opposite.lower = 1 and p.opposite.upper = 1]
		[for (pack : Package | aClass._package)]
			[for (m : Class | pack.member -> filter(Class))]
				[if (m.name.toLower() <> aClass.name.toLower()) and (m.name.toLower() = p.opposite.type.name.toLower())]
					[for (a: Property | m.getAllAttributes()->removeAll(m.getAssociations().memberEnd)) separator('\n')]
						[if a.isID = true]
[p.opposite.type.name.toLowerFirst()/][a.name.toUpperFirst()/],
						[/if]
					[/for]
				[/if]
			[/for]
		[/for]
	[/if]
	[comment : ManyToMany/]
	[if p.lower = 0 and p.upper = -1 and p.type.name.toUpperFirst() = entity and 
		p.namespace = association and p.opposite.lower = 0 and p.opposite.upper = -1]
[p.opposite.type.name.toLowerFirst()/]Set,
	[/if]
	[comment : OneToMany/]
	[if p.lower = 1 and p.upper = 1 and p.type.name.toUpperFirst() = entity and 
		p.namespace = association and p.opposite.lower = 0 and p.opposite.upper = -1]
[p.opposite.type.name.toLowerFirst()/]List,
	[/if]
[/for]
[comment: fields/]
[for (p: Property | aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)->select(p | p.isID = false)) ]
[p.name.toLowerFirst()/][if aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)->size()-1 > i],[else][/if]
[/for]
[/template]

[comment:----------------------------------------------------------------------------------------------------/]

[template public queryBuilderParameters(aClass : Class){
	type 		: String = aClass.name.toUpperFirst();}]
[comment: foreign keys/]
[for (p : Property | aClass.getAssociations().memberEnd)]
	[comment : ManyToOne/]
	[if (p.lower = 0 or p.lower = 1) and p.upper = -1 and p.type.name.toUpperFirst() = entity and 
		p.namespace = association and p.opposite.lower = 1 and p.opposite.upper = 1]
		[for (pack : Package | aClass._package)]
			[for (m : Class | pack.member -> filter(Class))]
				[if (m.name.toLower() <> aClass.name.toLower()) and (m.name.toLower() = p.opposite.type.name.toLower())]
					[for (a: Property | m.getAllAttributes()->removeAll(m.getAssociations().memberEnd)) separator('\n')]
						[if a.isID = true]
if ([p.opposite.type.name.toLowerFirst()/][a.name.toUpperFirst()/] != null) {
	where.and(q[entity/].[p.opposite.type.name.toLowerFirst()/].[a.name.toLowerFirst()/].eq([p.opposite.type.name.toLowerFirst()/][a.name.toUpperFirst()/]));
}
						[/if]
					[/for]
				[/if]
			[/for]
		[/for]
	[/if]
	[comment : OneToOne/]
	[if (p.lower = 0 or p.lower = 1) and p.upper = 1 and p.type.name.toUpperFirst() = entity and p.namespace = association and p.opposite.lower = 1 and p.opposite.upper = 1]
		[for (pack : Package | aClass._package)]
			[for (m : Class | pack.member -> filter(Class))]
				[if (m.name.toLower() <> aClass.name.toLower()) and (m.name.toLower() = p.opposite.type.name.toLower())]
					[for (a: Property | m.getAllAttributes()->removeAll(m.getAssociations().memberEnd)) separator('\n')]
						[if a.isID = true]
if ([p.opposite.type.name.toLowerFirst()/][a.name.toUpperFirst()/] != null) {
	where.and(q[entity/].[p.opposite.type.name.toLowerFirst()/].[a.name.toLowerFirst()/].eq([p.opposite.type.name.toLowerFirst()/][a.name.toUpperFirst()/]));
}
						[/if]
					[/for]
				[/if]
			[/for]
		[/for]
	[/if]
	[comment : ManyToMany/]
	[if p.lower = 0 and p.upper = -1 and p.type.name.toUpperFirst() = entity and p.namespace = association and p.opposite.lower = 0 and p.opposite.upper = -1]
		[for (pack : Package | aClass._package)]
			[for (m : Class | pack.member -> filter(Class))]
				[if (m.name.toLower() <> aClass.name.toLower()) and (m.name.toLower() = p.opposite.type.name.toLower())]
					[for (a: Property | m.getAllAttributes()->removeAll(m.getAssociations().memberEnd)) separator('\n')]
						[if a.isID = true]
if ([p.opposite.type.name.toLowerFirst()/]Set != null) {
	where.and(q[entity/].[p.opposite.type.name.toLowerFirst()/]Set.any().[a.name.toLowerFirst()/].in([p.opposite.type.name.toLowerFirst()/]Set));
}
						[/if]
					[/for]
				[/if]
			[/for]
		[/for]
	[/if]
	[comment : OneToMany/]
	[if p.lower = 1 and p.upper = 1 and p.type.name.toUpperFirst() = entity and p.namespace = association and p.opposite.lower = 0 and p.opposite.upper = -1]
if ([p.opposite.type.name.toLowerFirst()/]List != null) {
	where.and(q[entity/].[p.opposite.type.name.toLowerFirst()/]List.any().in([p.opposite.type.name.toLowerFirst()/]List));
}
	[/if]
[/for]
[comment: fields/]
[for (p: Property | aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)->select(p | p.isID = false)) ]
	[if p.type.name = 'String']
if ([p.name.toLowerFirst()/] != null) {
	where.and(q[entity/].[p.name.toLowerFirst()/].containsIgnoreCase([p.name.toLowerFirst()/]));
}
	[else]
if ([p.name.toLowerFirst()/] != null) {
	where.and(q[entity/].[p.name.toLowerFirst()/].eq([p.name.toLowerFirst()/]));
}
	[/if]
[/for]
[/template]