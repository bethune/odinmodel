[comment encoding = UTF-8 /]
[module update('http://www.eclipse.org/uml2/5.0.0/UML')]

[comment]
	OdinModel is a framework for transforming a custom web application development into a model-driven rapid prototyping approach

    Copyright (C) 2019  Vladolium

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see https://www.gnu.org/licenses/.
[/comment]

[comment: base template /]
[template public update(aClass : Class){
	type 		: String = aClass.name.toUpperFirst();
	parameter	: String = aClass.name.toLowerFirst();}]
[comment: Update one by id /]
[for (field: Property | aClass.getAllAttributes()) separator('\n')]
	[if field.isID = true]
@PutMapping("/{[field.name.toLowerFirst()/]}")
public [type/] updateOneBy[field.name.toUpperFirst()/](@PathVariable [field.type.name.toUpperFirst()/] [field.name.toLowerFirst()/], @RequestBody [type/] [parameter/]) {
	[type/] current = [parameter/]Service.readOneBy[field.name.toUpperFirst()/]([field.name.toLowerFirst()/]);
	[foreignKeys(aClass)/]
	[fields(aClass)/]			
	return [parameter/]Service.createUpdate(current);
}
	[/if]
[/for]

[comment: Update one by id with IRIC /]
[for (field: Property | aClass.getAllAttributes()) separator('\n')]
	[if field.isID = true]
		[for (relationship : Property | aClass.getAssociations().memberEnd)]
			[comment: IRIC for manyToOne /]
			[if relationship.lower = 1 and relationship.upper = -1 and relationship.type.name.toUpperFirst() = type and 
				relationship.namespace = association and relationship.opposite.lower = 1 and relationship.opposite.upper = 1]
				[for (p : Package | aClass._package)]
					[for (oppositeEntity : Class | p.member -> filter(Class))]
						[if (oppositeEntity.name.toLower() <> aClass.name.toLower()) and (oppositeEntity.name.toLower() = relationship.opposite.type.name.toLower())]
							[for (oppositeEntityField: Property | oppositeEntity.getAllAttributes()->removeAll(oppositeEntity.getAssociations().memberEnd)) separator('\n')]
								[if oppositeEntityField.isID = true]
@PutMapping("/{[field.name.toLowerFirst()/]}/[relationship.opposite.type.name.toLowerFirst()/]")
public [type/] updateOneBy[field.name.toUpperFirst()/]Iric(@PathVariable [field.type.name.toUpperFirst()/] [field.name.toLowerFirst()/], @RequestBody [type/] [parameter/]) {
	[type/] current = [parameter/]Service.readOneBy[field.name.toUpperFirst()/]([field.name.toLowerFirst()/]);
	if (current.get[relationship.opposite.type.name.toUpperFirst()/]().get[oppositeEntityField.name.toUpperFirst()/]() == [parameter/].get[relationship.opposite.type.name.toUpperFirst()/]().get[oppositeEntityField.name.toUpperFirst()/]()) {
		[foreignKeys(aClass)/]
		[fields(aClass)/]			
		return [parameter/]Service.createUpdate(current);
	} else {
	    Iterable<[type/]> listOf[type/] = [parameter/]Service.readAllBy[relationship.opposite.type.name.toUpperFirst()/][oppositeEntityField.name.toUpperFirst()/](current.get[relationship.opposite.type.name.toUpperFirst()/]().get[oppositeEntityField.name.toUpperFirst()/]());
	    Long size = listOf[type/].spliterator().getExactSizeIfKnown();
	    if (size == 1) {
			return current;
	    } else {
			[foreignKeys(aClass)/]
			[fields(aClass)/]			
			return [parameter/]Service.createUpdate(current);
	    }
	}
}
								[/if]
							[/for]
						[/if]
					[/for]
				[/for]
			[/if]
		[/for]
	[/if]
[/for]

[comment: Update one by field with unique values /]
[for (field: Property | aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)) separator('\n')]
	[if field.isUnique = true and field.isID = false]
@PutMapping("/[field.name.toLowerFirst()/]={[field.name.toLowerFirst()/]}")
public [type/] updateOneBy[field.name.toUpperFirst()/](@PathVariable [field.type.name.toUpperFirst()/] [field.name.toLowerFirst()/], @RequestBody [type/] [parameter/]) {
	[type/] current = [parameter/]Service.readOneBy[field.name.toUpperFirst()/]([field.name.toLowerFirst()/]);
	[foreignKeys(aClass)/]
	[fields(aClass)/]			
	return [parameter/]Service.createUpdate(current);		
}
	[/if]
[/for]

[comment: Update one by field with unique values with IRIC /]
[for (field: Property | aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)) separator('\n')]
	[if field.isUnique = true and field.isID = false]
		[for (relationship : Property | aClass.getAssociations().memberEnd)]
			[comment: IRIC for manyToOne /]
			[if relationship.lower = 1 and relationship.upper = -1 and relationship.type.name.toUpperFirst() = type and 
				relationship.namespace = association and relationship.opposite.lower = 1 and relationship.opposite.upper = 1]
				[for (p : Package | aClass._package)]
					[for (oppositeEntity : Class | p.member -> filter(Class))]
						[if (oppositeEntity.name.toLower() <> aClass.name.toLower()) and (oppositeEntity.name.toLower() = relationship.opposite.type.name.toLower())]
							[for (oppositeEntityField: Property | oppositeEntity.getAllAttributes()->removeAll(oppositeEntity.getAssociations().memberEnd)) separator('\n')]
								[if oppositeEntityField.isID = true]
@PutMapping("/[field.name.toLowerFirst()/]={[field.name.toLowerFirst()/]}/[relationship.opposite.type.name.toLowerFirst()/]")
public [type/] updateOneBy[field.name.toUpperFirst()/]Iric(@PathVariable [field.type.name.toUpperFirst()/] [field.name.toLowerFirst()/], @RequestBody [type/] [parameter/]) {
	[type/] current = [parameter/]Service.readOneBy[field.name.toUpperFirst()/]([field.name.toLowerFirst()/]);
	if (current.get[relationship.opposite.type.name.toUpperFirst()/]().get[oppositeEntityField.name.toUpperFirst()/]() == [parameter/].get[relationship.opposite.type.name.toUpperFirst()/]().get[oppositeEntityField.name.toUpperFirst()/]()) {
		[foreignKeys(aClass)/]
		[fields(aClass)/]			
		return [parameter/]Service.createUpdate(current);
	} else {
	    Iterable<[type/]> listOf[type/] = [parameter/]Service.readAllBy[relationship.opposite.type.name.toUpperFirst()/][oppositeEntityField.name.toUpperFirst()/](current.get[relationship.opposite.type.name.toUpperFirst()/]().get[oppositeEntityField.name.toUpperFirst()/]());
	    Long size = listOf[type/].spliterator().getExactSizeIfKnown();
	    if (size == 1) {
			return current;
	    } else {
			[foreignKeys(aClass)/]
			[fields(aClass)/]			
			return [parameter/]Service.createUpdate(current);
	    }
	}
}
								[/if]
							[/for]
						[/if]
					[/for]
				[/for]
			[/if]
		[/for]
	[/if]
[/for]
[/template]

[comment:
----------------------------------------------------------------------------------------------------
subtemplates
----------------------------------------------------------------------------------------------------
/]

[template public foreignKeys(aClass : Class){
	type 		: String = aClass.name.toUpperFirst();
	parameter	: String = aClass.name.toLowerFirst();}]
[for (relationship : Property | aClass.getAssociations().memberEnd)]
	[comment : ManyToOne/]
	[if (relationship.lower = 0 or relationship.lower = 1) and relationship.upper = -1 and relationship.type.name.toUpperFirst() = type and 
		relationship.namespace = association and relationship.opposite.lower = 1 and relationship.opposite.upper = 1]
current.set[relationship.opposite.type.name.toUpperFirst()/]([parameter/].get[relationship.opposite.type.name.toUpperFirst()/]());
	[/if]
	[comment : OneToOne/]
	[if (relationship.lower = 0 or relationship.lower = 1) and relationship.upper = 1 and relationship.type.name.toUpperFirst() = type and 
		relationship.namespace = association and relationship.opposite.lower = 1 and relationship.opposite.upper = 1]
current.set[relationship.opposite.type.name.toUpperFirst()/]([parameter/].get[relationship.opposite.type.name.toUpperFirst()/]());
	[/if]
	[comment : ManyToMany/]
	[if relationship.lower = 0 and relationship.upper = -1 and relationship.type.name.toUpperFirst() = type and 
		relationship.namespace = association and relationship.opposite.lower = 0 and relationship.opposite.upper = -1]
current.set[relationship.opposite.type.name.toUpperFirst()/]Set([parameter/].get[relationship.opposite.type.name.toUpperFirst()/]Set());
	[/if]
	[comment : OneToMany/]
	[if relationship.lower = 1 and relationship.upper = 1 and relationship.type.name.toUpperFirst() = type and 
		relationship.namespace = association and relationship.opposite.lower = 0 and relationship.opposite.upper = -1]
current.set[relationship.opposite.type.name.toUpperFirst()/]List([parameter/].get[relationship.opposite.type.name.toUpperFirst()/]List());
	[/if]
[/for]
[/template]

[comment:----------------------------------------------------------------------------------------------------/]

[template public fields(aClass : Class){
	parameter	: String = aClass.name.toLowerFirst();}]
[for (field: Property | aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)) separator('\n')]
	[if field.isID = false]	
current.set[field.name.toUpperFirst()/]([parameter/].get[field.name.toUpperFirst()/]());
	[/if]
[/for]
[/template]
