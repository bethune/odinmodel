[comment encoding = UTF-8 /]
[module repository('http://www.eclipse.org/uml2/5.0.0/UML')]

[comment]

	OdinModel is a framework for transforming a custom web application development into a model-driven rapid prototyping approach

    Copyright (C) 2019  Vladolium

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see https://www.gnu.org/licenses/.

[/comment]

[template public repository(aClass : Class){
	isEntity 		: Boolean = aClass.isAbstract = false;
	packagePath		: String = aClass._package.name.toLowerCase();
	type 			: String = aClass.name.toUpperFirst();
	repositoryPath 	: String = aClass._package.name.replaceAll('/', '.').toLowerCase();
	parameter		: String = aClass.name.toLowerFirst();}]
[if isEntity]
	[file ('src/main/java/' + packagePath + '/repository/' + type + 'Repository.java', false, 'UTF-8')]
package [repositoryPath/].repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.*;
import [repositoryPath/].model.*;
import [repositoryPath/].model.[type/];
import [repositoryPath/].model.[type/].*;
import org.springframework.data.querydsl.*;
import org.springframework.data.querydsl.QuerydslPredicateExecutor;

		[for (field: Property | aClass.getAllAttributes()) separator('\n')]
			[if field.isID = true]
public interface [type/]Repository extends JpaRepository<[type/], [field.type.name.toUpperFirst()/]>, QuerydslPredicateExecutor<[type/]> {
			[/if]
		[/for]

		[comment: read one by field with unique values /]
		[for (field: Property | aClass.getAllAttributes()->removeAll(aClass.getAssociations().memberEnd)) separator('\n')]
			[if field.isUnique = true]
[type/] findBy[field.name.toUpperFirst()/]Equals([field.type.name.toUpperFirst()/] [field.name.toLowerFirst()/]);
			[/if]
		[/for]

		[comment: Read all by parent id in many to one relationship /]
		[for (relationship : Property | aClass.getAssociations().memberEnd)]
			[if (relationship.lower = 0 or relationship.lower = 1) and relationship.upper = -1 and relationship.type.name.toUpperFirst() = type and 
				relationship.namespace = association and relationship.opposite.lower = 1 and relationship.opposite.upper = 1]
				[for (p : Package | aClass._package)]
					[for (oppositeEntity : Class | p.member -> filter(Class))]
						[if (oppositeEntity.name.toLower() <> aClass.name.toLower()) and (oppositeEntity.name.toLower() = relationship.opposite.type.name.toLower())]
							[for (oppositeEntityField: Property | oppositeEntity.getAllAttributes()->removeAll(oppositeEntity.getAssociations().memberEnd)) separator('\n')]
								[if oppositeEntityField.isID = true]
[comment: Read all by parent id /]
Iterable <[relationship.type.name.toUpperFirst()/]> findBy[relationship.opposite.type.name.toUpperFirst()/][oppositeEntityField.name.toUpperFirst()/]Equals([oppositeEntityField.type.name.toUpperFirst()/] [relationship.opposite.type.name.toLowerFirst()/][oppositeEntityField.name.toUpperFirst()/]);

[comment: Read all by parent id with pagination /]
Page <[relationship.type.name.toUpperFirst()/]> findBy[relationship.opposite.type.name.toUpperFirst()/][oppositeEntityField.name.toUpperFirst()/]Equals([oppositeEntityField.type.name.toUpperFirst()/] [relationship.opposite.type.name.toLowerFirst()/][oppositeEntityField.name.toUpperFirst()/], Pageable page);
								[/if]
							[/for]
						[/if]
					[/for]
				[/for]
			[/if]
		[/for]

		[comment: Read all by parent unique field in many to one relationship /]
		[for (relationship : Property | aClass.getAssociations().memberEnd)]
			[if (relationship.lower = 0 or relationship.lower = 1) and relationship.upper = -1 and relationship.type.name.toUpperFirst() = type and 
				relationship.namespace = association and relationship.opposite.lower = 1 and relationship.opposite.upper = 1]
				[for (p : Package | aClass._package)]
					[for (oppositeEntity : Class | p.member -> filter(Class))]
						[if (oppositeEntity.name.toLower() <> aClass.name.toLower()) and (oppositeEntity.name.toLower() = relationship.opposite.type.name.toLower())]
							[for (oppositeEntityField: Property | oppositeEntity.getAllAttributes()->removeAll(oppositeEntity.getAssociations().memberEnd)) separator('\n')]
								[if oppositeEntityField.isUnique = true and oppositeEntityField.isID = false]
[comment: Read all by parent unique field /]
Iterable <[relationship.type.name.toUpperFirst()/]> findBy[relationship.opposite.type.name.toUpperFirst()/][oppositeEntityField.name.toUpperFirst()/]Equals([oppositeEntityField.type.name.toUpperFirst()/] [relationship.opposite.type.name.toLowerFirst()/][oppositeEntityField.name.toUpperFirst()/]);

[comment: Read all by parent unique field with pagination /]
Page <[relationship.type.name.toUpperFirst()/]> findBy[relationship.opposite.type.name.toUpperFirst()/][oppositeEntityField.name.toUpperFirst()/]Equals([oppositeEntityField.type.name.toUpperFirst()/] [relationship.opposite.type.name.toLowerFirst()/][oppositeEntityField.name.toUpperFirst()/], Pageable page);
								[/if]
							[/for]
						[/if]
					[/for]
				[/for]
			[/if]
		[/for]

//Code between start and end will not be removed during generation.
//[protected ('for this repository')]
//[/protected]
}
	[/file]
[/if]
[/template]