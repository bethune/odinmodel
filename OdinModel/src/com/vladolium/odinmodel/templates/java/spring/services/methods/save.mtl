[comment]
	OdinModel is a free and open-source framework for transforming a custom web application development 
	into a model-driven rapid prototyping approach.

    Copyright (C) 2020  Vladolium

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and 
	associated documentation files (the "Software"), to deal in the Software without restriction, 
	including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or 
	sell copies of the Software, and to permit persons to whom the Software is furnished to do so, 
	subject to the following conditions:

	The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
	WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR 
	COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, 
	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
[/comment]

[comment encoding = UTF-8 /]
[module save('http://www.eclipse.org/uml2/5.0.0/UML')]

[template public save(umlClass : Class){
	entityNameUpperFirst 	: String = umlClass.name.toUpperFirst();
	entityNameLowerFirst	: String = umlClass.name.toLowerFirst();}]
// covers create, update and update with IRIC
@Override
public [entityNameUpperFirst/] saveOne([entityNameUpperFirst/] [entityNameLowerFirst/]) {
	return [entityNameLowerFirst/]Repository.save([entityNameLowerFirst/]);
}

[for (relationship : Property | umlClass.getAssociations().memberEnd)]
	[comment: IRIC for manyToOne /]
	[if relationship.lower = 1 and relationship.upper = -1 and relationship.opposite.type.name.toUpperFirst() = entityNameUpperFirst and 
		relationship.namespace = association and relationship.opposite.lower = 1 and relationship.opposite.upper = 1] 
private [relationship.type.name.toUpperFirst()/]Repository [relationship.type.name.toLowerFirst()/]Repository;

// covers create with IRIC
public [entityNameUpperFirst/] saveOneWithIric([entityNameUpperFirst/][relationship.type.name.toUpperFirst()/] [entityNameLowerFirst/][relationship.type.name.toUpperFirst()/]) {

	[entityNameUpperFirst/] current[entityNameUpperFirst/] = [entityNameLowerFirst/]Repository.save([entityNameLowerFirst/][relationship.type.name.toUpperFirst()/].get[entityNameUpperFirst/]());

	[relationship.type.name.toUpperFirst()/] current[relationship.type.name.toUpperFirst()/] = [entityNameLowerFirst/][relationship.type.name.toUpperFirst()/].get[relationship.type.name.toUpperFirst()/]();

	current[relationship.type.name.toUpperFirst()/].set[entityNameUpperFirst/]([entityNameLowerFirst/]Repository.getOne(current[entityNameUpperFirst/].getId()));

	[relationship.type.name.toLowerFirst()/]Repository.save(current[relationship.type.name.toUpperFirst()/]);

	return current[entityNameUpperFirst/];
}
	[/if]
[/for]
[/template]
