--------------------------------------------------------------------------------------------------------------------------
	STRUKTURA ODINMODELA
--------------------------------------------------------------------------------------------------------------------------
0.  main
	-> Ulazna tačka za generisanje koda.
	-> Korisnik ništa ne radi.

1.  Choose project platform 
	-> java, python, php, c#... 
	-> Korisnik može da odabere ciljnu platormu.

2.  Choose java project (analogno je za ostale platforme)
	-> spring, jsf, play...
	-> Korisnik bira koji tip, koju vrstu Java projekta želi u odnosu na framework
	
3.  Choose spring project (analogno je za ostale tipove)
	-> querydsl, jpaspecification, Spring 3 (ostavi za SPE časopis, jer je to onda dodatak na već postojeći odinModel :P)
	-> Korisnik bira varijantu odabranog tipa
	
4.  springBootJpaWithQuerydsl
	springBootJpaSpecifications
	spring3Jdbc
	jsfSpringJpaDataWithQuerydsl
	struktura će biti takva da se kontroler, servis, interfejs, nalaze pod paketom domenskog entiteta

---------------------------------------------------------------------------------------------------------------


**UML to Spring Boot mappings:** <br/>
	Class -> Entity <br/>
	Attribute -> Entity field <br/>
  	Attribute's *Is ID property* -> Primary key constraint <br/>
	Attribute's *Multiplicity* property -> Null constraint <br/>
  	Attribute's *Unique* property -> Unique constraint <br/>
  	Attribute's *Owned comments* -> JPA constraints <br/>
	Association -> Entity relationship <br/>
	Association's *Multiplicity* property -> Types of entity relationships <br/>
	Generalization -> Abstract super class <br/>
	Package's *Name* property -> Custom package path <br/>
	Data Type -> Entity field's data types <br/> 
	Enumeration & Enumeration <br/>

**Supported features:**<br/>
	- all JPA constraints <br/>
	- all four unidirectional relationships: many-to-one, one-to-many, one-to-one, and many-to-many <br/>
	- the IRIC checks before create, update, and delete in many-to-one relationships <br/>
	- Blob, Clob, Long, Integer, Double, Boolean, Enumeration, String, Date, Time, DateTime, and Timestamp data types <br/>
	- create, read, update and delete (CRUD) functionalities <br/>
	- dynamic search for instances with and without pagination <br/>
	- update one instance by id or fields with the unique constraint <br/>
	- read one instance by id or fields with the unique constraint <br/>
	- read all instances with or without pagination <br/>
	- for entities in many-to-one relationship, read all instances by parent instance's either id or fields with the unique constraint, with or without pagination <br/>
	- configuring pom.xml and application.properties files <br/>
	- H2, MySQL, and PostgreSQL configuration <br/>
	- Swagger 2 as UI client for REST <br/>


--------------------------------------------------------------------------------------------------------------------------
	RAZNO
--------------------------------------------------------------------------------------------------------------------------	
	
Ideja i plan

Da li bih mogao da napišem 2 rada o OdinModelu?

Software Practice and Experience (SPE) je časopis gde bih mogao pisati o tome 
kako sam rešio problem kastomizovanog generatora. Koristeći postojeće tehnologije 
(UML + Acceleo) na „svoj“ način, omogućio sam da se bilo koji razvojni proces pretoči u 
brzo prototipovanje. U radu bih opisao kako koristim UML i Acceleo, tačnije koje UML elemente 
(i šta predstavljaju) kojim Acceleo izrazima pretačem u potreban kastomizovan kod. Kao primer 
bih naveo Spring Boot „legacy“ razvojni proces koji koristi Querydsl. Poenta je da pišem o iskustvu 
sa Acceleo softverom. Poenta je da imam search + crud. Poenta je da šijem JHipster sa JPA anotacijama 
na modelu. Znači, zahvaljujući svom pristupu, rešavam mnoge stvari koje mi drugi alati ne 
omogućavaju, a to je da sam diktiram šta će se desiti. Naravno, potrebno je upoznati se sa Acceleom, 
ali ovako sažvakano nije problem i bolje je nego učiti svaki put novi frejmvork, a onda i generator za njega. 
Novelty deo je univerzalni pristup kastomizovanim generatorima koda baziran na standardima. Univerzalna podrška legacy tehnologijama. 

OdinModel4SpringBoot bez IRIC.


KNOSYS je časopis gde bih mogao pisati o aplikaciji OdinModel koja pokriva Spring Boot REST slučaj, kao I JSF + Spring Data JPA slučaj, 
što do sada nije rađeno, bar ne automatizacija toga. 
Baziran na tehnikama iz rada SPE (ali to neće ići tako, jer ih maltene šaljem u isto vreme). 
Novelty deo je IRIC pristup I JSF + Spring Data generator.



Nivoi kastomizacije
Basic – menja se generisani kod aplikacije
Medium – menja se sve unutar customizable paketa
Advanced – menjaju se ostali templejti
Pro – kreiraju se sopstveni templejti

reusable komentari

@param class represents the current class from the UML class diagram i.e. the domain model.

---

@param target represents the application components for which template generates code.

@param field represents the current field from the current UML class.

@param relationship represents the current relationship of the current class from the UML class diagram i.e. the domain model.

OMPOC (OdinModel Point Of Customization)

separator('\n')
post(trim())
post (replaceAll('\n\n', '\n').trim())


e sad... jooq --- ništa od toga, sranje je... koritim spring jpa specifikaciju...	